import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
	ext {
		springBootPlugin = 'org.springframework.boot:spring-boot-gradle-plugin'
		springBootVersion = '2.1.4.RELEASE'
		thinPlugin = 'org.springframework.boot.experimental:spring-boot-thin-gradle-plugin'
		thinVersion = '1.0.11.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE'
		classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
	}
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jp.classmethod.aws'
apply plugin: 'jp.classmethod.aws.lambda'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'example'
version = '0.0.14'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', 'Greenwich.SR1')
}


dependencies {
	compile 'com.amazonaws:aws-lambda-java-core:1.2.0'
	compile 'com.amazonaws:aws-lambda-java-events:2.1.0'
//	compile 'com.amazonaws:aws-java-sdk-s3:1.11.308'

	implementation 'org.springframework.cloud:spring-cloud-starter-function-web'
	implementation 'org.springframework.cloud:spring-cloud-function-web'
	compile 'org.springframework.cloud:spring-cloud-function-adapter-aws'
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

ext {
	mainClass = 'example.Application'
}

shadowJar {
	classifier = 'aws'
	mergeServiceFiles()
	mergeGroovyExtensionModules()
	manifest {
		attributes(
				'Main-Class': mainClass,
				'Start-Class': mainClass,
				'Spring-Boot-Classes': ''
		)
	}
	dependencies {
		exclude dependency("org.springframework.cloud:spring-cloud-function-web")
		exclude dependency("org.springframework.cloud:spring-cloud-starter-function-web")
	}
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
		mergeSeparator = ','
		mergeStrategy = 'append'
		paths = [
				'META-INF/spring.factories',
				'META-INF/spring.handlers',
				'META-INF/spring.provides',
				'META-INF/spring.schemas',
				'META-INF/spring.tooling',
				'META-INF/spring-autoconfigure-metadata.properties',
		]
	}
}


assemble.dependsOn shadowJar

task deployFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [assemble, test]) {
	functionName = "reverseString"
	runtime = com.amazonaws.services.lambda.model.Runtime.Java8
	role = "arn:aws:iam::${aws.accountId}:role/<your-lambda-role>"

	zipFile = shadowJar.archivePath
	handler = "example.Handler"
	memorySize = 512
	timeout = 45
}

